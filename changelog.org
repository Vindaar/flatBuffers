* v0.1.5
- improve performance of ~saveBuffer~ by writing to ~memfile~ directly
  instead of to a buffer first (also special cases ~saveBuffer~ taking
  an object vs taking a ~Buffer~)
- add a CT option ~-d:FullSets=true/false~, which decides how built in
  sets are stored. If it is true, we store the entire memory of the
  set (which is more performant, but uses possibly much more memory).
  Note: loading data works independent of how the set was saved,
  due to an additional byte to indicate the storage method.
* v0.1.4
- add ~save/loadBuffer~ interface to directly store to or load from a
  path
- handle ~set~ correctly and ignore ~proc~ explictly (otherwise causes
  infinite recursion)
- improve storing of ~Tensor~ by including shape and making sure not
  to serialize empty tensor  
* v0.1.3
- add direct ~asFlat~ support for Tensors
- add support for ~distinct~ types
- support arrays via ~openArray~ (instead of just ~seq~)  
* v0.1.2
- make ~tensor~ submodule importable
* v0.1.1
- improve support for variant objects. Now multi variant objects are
  supported
- add submodule ~flatBuffers_tensor~ for arraymancer tensors  
